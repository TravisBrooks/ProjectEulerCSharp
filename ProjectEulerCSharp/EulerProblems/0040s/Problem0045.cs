using System;
using ProjectEulerCSharp.EulerMath;

namespace ProjectEulerCSharp.EulerProblems._0040s
{
    [Euler(
        title: "Problem 45: Triangular, Pentagonal, and Hexagonal",
        description: @"Triangle, pentagonal, and hexagonal numbers are generated by the following formulae:

Triangle	 	Tn = n(n + 1)/2  	1, 3, 6, 10, 15, ...
Pentagonal	 	Pn = n(3n -1)/2 	1, 5, 12, 22, 35, ...
Hexagonal	 	Hn = n(2n - 1) 	    1, 6, 15, 28, 45, ...
It can be verified that T285 = P165 = H143 = 40755.

Find the next triangle number that is also pentagonal and hexagonal.")
    ]
    // ReSharper disable once UnusedMember.Global
    public class Problem0045 : ISolution<long>
    {
        public bool HaveImplementedAnalyticSolution => false;

        public long BruteForceSolution()
        {
            // The hexagonal fn appears to grow the fastest so we'll generate those. Using T or P would mean making
            // many more test numbers that couldn't possibly be shared by the other 2. Then using the same strategy of
            // #44 invert the T and P functions to test if the number generated by Hn is also shared by T and P.
            var n = 144;
            while (true)
            {
                var hn = FigurateNumbers.Hexagonal(n);
                if (FigurateNumbers.IsTriangular(hn) && FigurateNumbers.IsPentagonal(hn))
                {
                    return hn;
                }

                n++;
            }
        }

        public long AnalyticSolution()
        {
            throw new NotImplementedException();
        }

        public long ExpectedSolution()
        {
            return 1_533_776_805;
        }
    }
}
