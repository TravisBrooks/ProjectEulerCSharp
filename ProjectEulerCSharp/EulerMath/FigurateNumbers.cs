using System;

namespace ProjectEulerCSharp.EulerMath
{
    public static class FigurateNumbers
    {
        public static long Triangular(long n)
        {
            // Tn = n(n + 1)/2  	1, 3, 6, 10, 15, ...
            var num = n * (n + 1);
            var t = num / 2;
            return t;
        }

        public static double InvertedTriangular(long maybeTriangular)
        {
            // inverted version of triangular function.
            //x = (y ^ 2 + y)2
            //2x = y ^ 2 + y
            //0 = y ^ 2 + y - 2x
            // applying quadratic equation
            // y = (-1 + sqrt(8 * x + 1))/2
            var num = -1 + Math.Sqrt(8 * maybeTriangular + 1);
            var n = num / 2;
            return n;
        }

        public static bool IsTriangular(long maybeTriangular)
        {
            var n = InvertedTriangular(maybeTriangular);
            return n.IsInteger();
        }

        public static long Pentagonal(long n)
        {
            // Pn = n(3n -1)/2 	1, 5, 12, 22, 35, ... 
            var num = n * (3 * n - 1);
            var p = num / 2;
            return p;
        }

        public static double InvertedPentagonal(long maybePentagonal)
        {
            // This is just the inverted version of the pentagonal function. The steps I did to invert P(x) are:
            // x = (3y^2 - y)/2
            // 2x = 3y^2 - y
            // 0 = 3y^2 - y - 2x
            // Then I looked up ye old quadratic equation, plugged in the numbers and came up with 
            // y = (1 + √(24x + 1))/6
            // This inverted fn is continuous but we only care about the cases where it works out to an integer, indicating that the
            // passed in number is generated by Pentagonal(n)
            var num = 1 + Math.Sqrt(24 * maybePentagonal + 1);
            var n = num / 6;
            return n;
        }

        public static bool IsPentagonal(long maybePentagonal)
        {
            var n = InvertedPentagonal(maybePentagonal);
            return n.IsInteger();
        }

        public static long Hexagonal(long n)
        {
            // Hn = n(2n - 1) 	    1, 6, 15, 28, 45, ...
            var h = n * (2 * n - 1);
            return h;
        }

        //public static bool IsHexagonal(long maybePentagonal)
        //{
        //    throw new NotImplementedException();
        //}

    }
}
