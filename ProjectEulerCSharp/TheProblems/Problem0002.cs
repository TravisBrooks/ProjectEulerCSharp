using System.Linq;

namespace TheProblems
{
    [Euler("Even Fibonacci numbers",
        @"Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.")]
    // ReSharper disable once UnusedMember.Global
    public class Problem0002 : ISolution<long>
    {
        /****************************************************************************************************
         * Even Fibonacci numbers
         *
         * Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
         *      1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
         * By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
         ****************************************************************************************************/
        public long BruteForceSolution()
        {
            // This is the more readable version, but runs about 2x slower than the for loop
            //return Fibonacci.Sequence()
            //    .TakeWhile(f => f <= 4_000_000)
            //    .Where(f => f % 2 == 0)
            //    .Sum();

            var total = 0L;
            var fibs = Fibonacci.Sequence().ToArray();
            for (var i = 0; i < fibs.Length; i++)
            {
                var fib = fibs[i];
                if (fib > 4_000_000)
                {
                    break;
                }

                if (fib % 2 == 0)
                {
                    total += fib;
                }
            }

            return total;
        }

        public bool HaveImplementedAnalyticSolution => false;

        public long AnalyticSolution()
        {
            throw new System.NotImplementedException();
        }

        public long ExpectedSolution()
        {
            return 4613732;
        }
    }
}